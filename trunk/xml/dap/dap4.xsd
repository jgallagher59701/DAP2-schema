<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://www.w3.org/2008/09/xsd.xsl" type="text/xsl"?>
<xs:schema targetNamespace="http://xml.opendap.org/ns/DAP/4.0#"
	xmlns="http://xml.opendap.org/ns/DAP/4.0#" 
	xmlns:dap="http://xml.opendap.org/ns/DAP/4.0#"
	xmlns:xml="http://www.w3.org/XML/1998/namespace" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.w3.org/2001/XMLSchema http://www.w3.org/2001/XMLSchema.xsd"
	elementFormDefault="qualified" 
	attributeFormDefault="unqualified">

	<!-- Note that these schemas are local; the XML one can be found at 
		http://www.w3.org/2001/xml.xsd. While there is no official schema for 
		xlink a 'non-normative' one is provided in the appendix of
		http://www.w3.org/TR/xlink11/. jhrg 2/7/12 -->
	
	<xs:import namespace="http://www.w3.org/XML/1998/namespace"
		schemaLocation="xml.xsd"/>
	
	<xs:import namespace="http://www.w3.org/1999/xlink"
		schemaLocation="xlink.xsd"/>
		
	<xs:element name="Dataset" type="DatasetT">
		<xs:annotation>
			<xs:documentation>
				<div>
					<h1>About the DAP4 metadata response document</h1>
					
					<div class="bodytext">
						The Dataset element holds the syntactic and semantic 
						metadata associated with a resource accessible using
						DAP4
					</div>
				</div>
				
				metadata (syntax and semantic) responses.
				
				Element names: Element names that start with capital letters
				correspond to parts of the DAP4 data model while those that
				start with lowercase letters are used for document structure
				and syntax.
				
				TODO
				
				DAP 4.0 introduces SharedDimension, Group, Opaque, 64-bit integers and
				UnsignedByte. In addition: The syntax for Array has been changed so that
				it's easier for processing software to figure out the type of an array; 
				Grids have been generalized so that there can be any number of 'Array'
				parts (and the Maps may be multi-dimensional); and OtherXML has been renamed
				OtherXML and made its own element (it's no longer a type of 'Attribute'). 

			</xs:documentation>
		</xs:annotation>
	</xs:element>


	<xs:complexType name="DatasetT">
		<xs:annotation>
			<xs:documentation>
				This is the XML representation of a data source in DAP 4.
				
				name: The name of the data source; often a string used to
					uniquely reference the data source wrt a particular
					server
				dapVersion: The protocol version that corresponds to this
					document.
				
				Note that the 'blob' element is only present when this is used
				as the prefix for the Data response.
				
				( OtherXML*, Attribute*, Group+, blob? )
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:group ref="Metadata"/>
			<xs:element name="Group" type="GroupT" minOccurs="1" maxOccurs="unbounded"/>
			<xs:element name="blob" type="BlobT" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="dapVersion" type="xs:string" use="required"/>
		<xs:attribute ref="xml:base" use="required"/>

	</xs:complexType>

	<xs:group name="Metadata">
		<xs:annotation>
			<xs:documentation>
				These elements are used in several places to hold the 
				'semantic' and/or 'use' metadata for the dataset, its groups 
				and variables.
				
				( OtherXML*, Attribute* )
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OtherXML" type="OtherXmlT" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Attribute" type="AttributeT" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:group>

	<xs:complexType name="AttributeT">
		<xs:annotation>
			<xs:documentation>
				DAP uses attributes as a way to encode information that data
				providers has bundled with data sources. This element is 
				recursive. Each Attribute element defines a lexical scope.
				
				name: The name of the attribute; must be unique within the 
					scope.
				type: The type of the attribute. Attributes are limited to 
					simple types, vectors of simple types and 'Containers' 
					which are essentially structure types. 
				namespace: Use this to indicate that the given attribute
					means the same thing as the matching item in the given
					namespace. This optional attribute is here to help preserve
					information that a data server might know to be true that
					a client application could not assume with certainty.
				
				( Value+ | ( OtherXML*, Attribute* ) )
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:sequence>
				<xs:element name="value" type="xs:string" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:sequence>
				<xs:group ref="Metadata"/>
			</xs:sequence>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<!-- TODO: Extend to more DAP types? -->
		<xs:attribute name="type" type="AttributeTypeT" use="required"/>
		<xs:attribute name="namespace" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
					The 'namespace' attribute
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<!-- These types have been declared to minimize name duplication -->

	<xs:simpleType name="CardinalTypeNamesT">
		<xs:annotation>
			<xs:documentation>
				Changes from DAP2 to DAP4: The Byte type is now signed and
				unsigned bytes are now represented by the 'UByte' data type.
				The types Int64 and UInt64 represent signed and unsigned 64-bit
				integers. String uses UTF-8 in DAP4.
				Enumerations are now in the mix.
			</xs:documentation>
		</xs:annotation>
		
		<xs:restriction base="xs:string">
			<xs:enumeration value="Byte"/>
			<xs:enumeration value="UByte"/>
			<xs:enumeration value="Int16"/>
			<xs:enumeration value="UInt16"/>
			<xs:enumeration value="Int32"/>
			<xs:enumeration value="UInt32"/>
			<xs:enumeration value="Int64"/>
			<xs:enumeration value="UInt64"/>
			<xs:enumeration value="Float32"/>
			<xs:enumeration value="Float64"/>
			<xs:enumeration value="String"/>
			<xs:enumeration value="Url"/>
			<xs:enumeration value="Enum"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="OpaqueT">
		<xs:annotation>
			<xs:documentation>
				This is essentially a BLOB type. Like a String, it is a type 
				with varying size and it can be used in Structures, Arrays and
				Sequences. It cannot, howerver, be part of a Grid.
			</xs:documentation>
		</xs:annotation>
		
		<xs:restriction base="xs:string">
			<xs:enumeration value="Opaque"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="ContainerT">
		<xs:annotation>
			<xs:documentation>
				The Container type is used to hold structure (or 'Container')
				attributes. These correspond to the netCDF4/HDF5 compound type
				for attributes.
			</xs:documentation>
		</xs:annotation>
		
		<xs:restriction base="xs:string">
			<xs:enumeration value="Container"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="AttributeTypeT">
		<xs:annotation>
			<xs:documentation>
				Hack: Here Attribute types are apparently defined as scalars
				or Containers. However, they are actually scalars, vectors or
				containers.
			</xs:documentation>
		</xs:annotation>
		
		<xs:union memberTypes="CardinalTypeNamesT ContainerT"/>
	</xs:simpleType>

	<xs:complexType name="OtherXmlT">
		<xs:annotation>
			<xs:documentation>
				Use this to embed arbitrary XML in a DDX. This functions like
				an Attribute and appears in the same places as an Attribute,
				but its contents are ignored by DAP software. Other software
				might find the information useful. The XML elements must
				satisfy the requirements for 'lax' processing under schema 1.0.
				In practice, that means just about anything.
				
				name: A name to associate with this chunk of XML
				*: This element can contain any other attributes that conform 
					to the schema 1.0 definition of 'lax' processing
					
				( <xs:any/>+ ) 
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:any namespace="##other" minOccurs="1" maxOccurs="unbounded" processContents="lax"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string"/>
		<xs:anyAttribute processContents="lax" namespace="##other"/>
	</xs:complexType>


	<xs:complexType name="GroupT">
		<xs:annotation>
			<xs:documentation>
				A Group is a lexical scoping tool used to replicate HDF5 and 
				netCDF4 Groups. Each Group defines a lexical scope. Each 
				dataset has at least one Group; if only one is present, it may
				be anonymous. In this case, by convention, it's name
				attribute should be 'anonymous', the default value.
				
				name: The name of the Group
				
				( OtherXML*, Attribute*, Dimension*, 
					ScalarType+ )
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="Metadata"/>
			<xs:element name="Dimension" type="DimensionT" minOccurs="0" maxOccurs="unbounded"/>
			<xs:group ref="VariableTypes" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" default="anonymous"/>
	</xs:complexType>


	<xs:complexType name="DimensionT">
		<xs:annotation>
			<xs:documentation>
				This defines a dimension (a name and size) that may be shared 
				between Grids and/or Arrays.
				
				name: The name of the dimension
				size: The size of the dimension
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="size" type="xs:integer" use="required"/>
	</xs:complexType>

	<!-- These groups have been defined to minimize name duplication -->

	<xs:group name="CardinalTypes">
		<xs:annotation>
			<xs:documentation>
				DAP cardinal data types
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="Byte" type="BaseType"/>
			<xs:element name="UByte" type="BaseType"/>
			<xs:element name="Int16" type="BaseType"/>
			<xs:element name="UInt16" type="BaseType"/>
			<xs:element name="Int32" type="BaseType"/>
			<xs:element name="UInt32" type="BaseType"/>
			<xs:element name="Int64" type="BaseType"/>
			<xs:element name="UInt64" type="BaseType"/>
			<xs:element name="Float32" type="BaseType"/>
			<xs:element name="Float64" type="BaseType"/>
			<xs:element name="String" type="BaseType"/>
			<xs:element name="Url" type="BaseType"/>
			<xs:element name="Enum" type="BaseType"/>
		</xs:choice>
	</xs:group>

	<xs:group name="VariableTypes">
		<xs:choice>
			<xs:group ref="CardinalTypes"/>
			
			<xs:element name="Opaque" type="BaseType"/>
			
			<xs:element name="Structure" type="StructureT"/>
			<xs:element name="Array" type="ArrayT" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Grid" type="GridT" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Sequence" type="SequenceT" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>


	<xs:complexType name="BaseType">
		<xs:annotation>
			<xs:documentation>
				Each variable in DAP4 is represented as a name and a collection
				of metadata (Attributes, ...). The type of the variable is 
				given in the element name (e.g., <Byte name="x"/>)
				
				name: The name of the variable
				
				( OtherXML*, Attribute*)
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="Metadata"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string"/>
	</xs:complexType>

	<xs:complexType name="ArrayDimensionT">
		<xs:annotation>
			<xs:documentation>
				name: The name of the dimension
				size: The size of the dimension
				ref: A reference to a Dimension definition
				
				Note: either name and size must be present or only ref must 
				be present
			</xs:documentation>
		</xs:annotation>
		
		<xs:attribute name="name" type="xs:string"/>
		<xs:attribute name="size" type="xs:integer"/>
		<xs:attribute name="ref" type="xs:string"/>
		
	</xs:complexType>

	<xs:complexType name="ArrayT">
		<xs:annotation>
			<xs:documentation>
				name: The name of the variable.
				
				NB: DAP4 allows for arrays of every type except: Grid or
				Sequence. Since the 'Array' element may list N dimensions (using
				the 'dim' child elements), the syntax does not allow 'Array'
				elements to be children of 'Array'.
				
				( OtherXML*, Attribute*, type, dim+)
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:sequence>
					<xs:element name="type">
						<xs:complexType>
							<xs:choice>
								<xs:group ref="CardinalTypes"/>
								
								<xs:element name="Opaque" type="BaseType"/>
								
								<xs:element name="Structure" type="StructureT"/>
							</xs:choice>
						</xs:complexType>
					</xs:element>
					<xs:element name="dim" type="ArrayDimensionT" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="GridT">
		<xs:annotation>
			<xs:documentation>
				A Grid is a type that relates one or more Maps (aka coordinate
				variables) to the dimensions of one or more Array variables. It
				is often the case that Maps correspond to independent variables
				like Latitude or sample number and Arrays represent dependent
				variables.
				
				name: The name of the variable
				
				( OtherXML*, Attribute*, Array+, Map+)
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:sequence>
					<!-- Subtle change here: In DAP 3.2 and earlier, maxOccurs
						for the Array element was 1, now it's 'unbounded' -->
					<xs:element name="Array" type="ArrayT" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element name="Map" type="MapT" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="MapT">
		<xs:annotation>
			<xs:documentation>
				name: name for this Map
				
				NB: Note the limitation on the type of a Map, which excludes
				Maps that are Opaques, Structures, Sequences or Grids.
				
				( OtherXML*, Attribute*, dim* )
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="Metadata"/>
			<xs:element name="dim" type="ArrayDimensionT" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
				
		<xs:attribute name="type" type="CardinalTypeNamesT" use="required"/>
		
	</xs:complexType>


	<xs:complexType name="StructureT">
		<xs:annotation>
			<xs:documentation>
				A Structure; a simple aggregation of variables. Unlike a Group,
				it's possible to from an Array of Structures.
				
				name: The name of the variable
				
				( OtherXML*, Attribute*, ( Byte | ... | Grid )+ )
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:group ref="VariableTypes" minOccurs="1" maxOccurs="unbounded"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="SequenceT">
		<xs:annotation>
			<xs:documentation>
				A Sequence is a type that holds tabular data where each row
				of the table represents a relation, as in a relational database.
				Sequences can nest, but Arrays of Sequences are not supported.
				
				name: The name of the variable
				
				( OtherXML*, Attribute*, ( Byte | ... | Grid )+ )
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:group ref="VariableTypes" minOccurs="1" maxOccurs="unbounded"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="BlobT">
		<xs:annotation>
			<xs:documentation>
				The 'Blob' element is used to point to an associated data 
				document. When DAP is used to access metadata only for a data
				source, no 'blob' element will be present. However, when a
				request for data is made, the Dataset element holds a
				description of the data values and the blob points to a place
				where those values will be found. 
				
				In DAP4 the Blob element refers to binary 
				(application/octet-stream) part within a multi-part MIME
				document or it refers to a separate document, possibly not
				imediately available. The latter case is included to support
				asynchronous responses (i.e., responses that cannot be returned
				quickly). See http://www.w3.org/TR/xlink11/.
				
				xlink:href: Refers to the multi-part MIME document part that 
					holds the data values, encoded using XDR or to a separate 
					document. In the first case, the IRI must begin with 'cid:'
					(see the owsManifest schema for an example of this use; 
					http://schemas.opengis.net/ows/2.0/owsManifest.xsd). In the 
					latter case, the IRI must refer to a remote resourse, and
					will likely start 'http:'.
				xlink:type: Always 'simple'
				xlink:role: If present the only values DAP4 supports are 
					'asynchronousResponse' and 'synchronousResponse'.
					<!-- TODO: Better names than async... and sync... ? -->
				available: Contains an ISO 8601 string that indicates when the
					client can expect for the remote resource to be 
					dereferencable without error. The special value 'now' is
					also allowed.
				until: Contains an ISO 8601 string that indicates when the 
					client can expect the remote resource to be removed by the
					server. The special value 'forever' is also allowed.
					
			</xs:documentation>
		</xs:annotation>

		<xs:attribute ref="xlink:type" use="optional" default="simple"/>
		<xs:attribute ref="xlink:href" use="required"/>
		<xs:attribute ref="xlink:role" use="optional"/>
		<xs:attribute name="available" use="optional"/>
		<xs:attribute name="until" use="optional"/>
	</xs:complexType>


</xs:schema>
